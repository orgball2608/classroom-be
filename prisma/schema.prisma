// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int          @id @default(autoincrement())
  email               String?      @unique
  googleId            String?      @unique @map("google_id")
  facebookId          String?      @unique @map("facebook_id")
  password            String?      @map("password")
  firstName           String       @map("first_name")
  lastName            String       @map("last_name")
  phoneNumber         String?      @map("phone_number")
  address             String?      @map("address")
  avatar              String?      @map("avatar")
  verifyEmailToken    String?      @map("verify_email_token")
  forgotPasswordToken String?      @map("forgot_password_token")
  studentId           String?      @unique @map("student_id")
  verify              VerifyStatus @default(UNVERIFY)
  sex                 Sex          @default(NONE)
  role                UserRole     @default(STUDENT)
  status              Boolean      @default(true)

  createdCourses     Course[]
  createdEnrollments Enrollment[]
  courseTeachers     CourseTeacher[]
  studentEnrollments Enrollment[]        @relation("student_enrollments")
  notificationTokens NotificationToken[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Notification {
  id                  Int                @id @default(autoincrement())
  notificationTokenId Int                @map("notification_token_id")
  title               String
  body                String
  status              NotificationStatus @default(UNREAD)
  createdBy           String             @map("created_by")

  notificationToken NotificationToken @relation(fields: [notificationTokenId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notifications")
}

model NotificationToken {
  id                Int                 @id @default(autoincrement())
  userId            Int                 @map("user_id")
  deviceType        String              @map("device_type")
  notificationToken String              @map("notification_token")
  status            FirebaseTokenStatus @default(INACTIVE)

  notifications Notification[]
  user          User           @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, status])
  @@map("notification_tokens")
}

model Course {
  id          Int     @id @default(autoincrement())
  name        String
  avatar      String?
  description String? @db.Text
  room        String?
  topic       String?
  code        String
  year        Int
  createdById Int     @map("created_by_id")
  status      Boolean @default(true)

  enrollments    Enrollment[]    @relation("course_students")
  courseTeachers CourseTeacher[] @relation("course_teachers")
  createdBy      User            @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("courses")
}

model Enrollment {
  id          Int     @id @default(autoincrement())
  courseId    Int     @map("course_id")
  studentId   Int     @map("student_id")
  createdById Int     @map("created_by_id")
  status      Boolean @default(true)

  student   User   @relation(name: "student_enrollments", fields: [studentId], references: [id])
  course    Course @relation(name: "course_students", fields: [courseId], references: [id])
  createdBy User   @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([studentId, courseId])
  @@map("enrollments")
}

model CourseTeacher {
  id        Int     @id @default(autoincrement())
  courseId  Int     @map("course_id")
  teacherId Int     @map("teacher_id")
  status    Boolean @default(true)

  course  Course @relation(name: "course_teachers", fields: [courseId], references: [id])
  teacher User   @relation(fields: [teacherId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([courseId, teacherId])
  @@map("course_teachers")
}

enum NotificationStatus {
  UNREAD
  READ
}

enum FirebaseTokenStatus {
  ACTIVE
  INACTIVE
}

enum UserRole {
  ADMIN
  STUDENT
  TEACHER
}

enum VerifyStatus {
  UNVERIFY
  VERIFY
}

enum Sex {
  MALE
  FEMALE
  NONE
}
