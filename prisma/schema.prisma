// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int          @id @default(autoincrement())
  email               String?      @unique
  googleId            String?      @unique
  facebookId          String?      @unique
  password            String?
  firstName           String
  lastName            String
  phoneNumber         String?
  address             String?
  avatar              String?
  verifyEmailToken    String?
  forgotPasswordToken String?
  studentId           String?      @map("student_id")
  verify              VerifyStatus @default(UNVERIFY)
  sex                 Sex          @default(NONE)
  role                UserRole     @default(USER)
  status              Boolean      @default(true)

  createdCourses     Course[]
  notificationTokens NotificationToken[]
  teachers           Course[]            @relation("course_teachers")
  studentEnrollments Enrollment[]        @relation("student_enrollments")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Notification {
  id                  Int                @id @default(autoincrement())
  notificationTokenId Int                @map("notification_token_id")
  title               String
  body                String
  status              NotificationStatus @default(UNREAD)
  createdBy           String             @map("created_by")

  notificationToken NotificationToken @relation(fields: [notificationTokenId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notifications")
}

model NotificationToken {
  id                Int                 @id @default(autoincrement())
  userId            Int
  deviceType        String              @map("device_type")
  notificationToken String              @map("notification_token")
  status            FirebaseTokenStatus @default(INACTIVE)

  notifications Notification[]
  user          User           @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, status])
  @@map("notification_tokens")
}

model Course {
  id          Int     @id @default(autoincrement())
  name        String
  avatar      String?
  description String? @db.Text
  room        String?
  topic       String?
  code        String
  year        Int
  createdById Int     @map("created_by_id")
  status      Boolean @default(true)

  students  Enrollment[] @relation("course_students")
  teachers  User[]       @relation("course_teachers")
  createdBy User         @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("courses")
}

model Enrollment {
  id        Int     @id @default(autoincrement())
  courseId  Int     @map("course_id")
  studentId Int     @map("student_id")
  createdBy String  @map("created_by")
  status    Boolean @default(true)

  student User   @relation(name: "student_enrollments", fields: [studentId], references: [id])
  course  Course @relation(name: "course_students", fields: [courseId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([studentId, courseId])
  @@map("enrollments")
}

enum NotificationStatus {
  UNREAD
  READ
}

enum FirebaseTokenStatus {
  ACTIVE
  INACTIVE
}

enum UserRole {
  ADMIN
  USER
}

enum VerifyStatus {
  UNVERIFY
  VERIFY
}

enum Sex {
  MALE
  FEMALE
  NONE
}
